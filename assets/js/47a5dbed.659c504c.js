"use strict";(self.webpackChunkwida_fe_docs_test=self.webpackChunkwida_fe_docs_test||[]).push([[87],{2953:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"error-handling","title":"Error Handling","description":"Form validation","source":"@site/docs/error-handling.md","sourceDirName":".","slug":"/error-handling","permalink":"/docusarus-fe-guideline-sandbox/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/fazzaamiarso/docusarus-fe-guideline-sandbox/docs/error-handling.md","tags":[],"version":"current","frontMatter":{"sidebar__position":5,"sidebar_label":"Error Handling","title":"Error Handling"},"sidebar":"docs","previous":{"title":"State Management","permalink":"/docusarus-fe-guideline-sandbox/state-management"},"next":{"title":"Performance Optimization","permalink":"/docusarus-fe-guideline-sandbox/performance-optimization"}}');var s=r(4848),t=r(8453);const a={sidebar__position:5,sidebar_label:"Error Handling",title:"Error Handling"},i=void 0,l={},c=[{value:"Form validation",id:"form-validation",level:2},{value:"<strong>Async Executions</strong>",id:"async-executions",level:2},{value:"<strong>API Call Errors</strong>",id:"api-call-errors",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"form-validation",children:"Form validation"}),"\n",(0,s.jsx)(n.p,{children:"render the error message as close as possible to the relevant field"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { z } from \'zod\';\n\n// schema\nconst loginSchema = z.object({\n    email: z.string().email("Invalid email address"),\n    password: z.string().min(8, "Password must be at least 8 characters long"),\n});\n\nexport type LoginFormData = z.infer<typeof loginSchema>;\n\n// component\nconst LoginForm: React.FC = () => {\n    const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    });\n\n    const onSubmit: SubmitHandler<LoginFormData> = (data) => {\n    console.log(\'Form data submitted:\', data);\n    };\n\n    return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n        <div>\n        <label htmlFor="email">Email</label>\n        <input\n            id="email"\n            type="email"\n            {...register(\'email\')}\n        />\n        {errors.email && <span>{errors.email.message}</span>}\n        </div>\n\n        <div>\n        <label htmlFor="password">Password</label>\n        <input\n            id="password"\n            type="password"\n            {...register(\'password\')}\n        />\n        {errors.password && <span>{errors.password.message}</span>}\n        </div>\n\n        <button type="submit">Login</button>\n    </form>\n    );\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"async-executions",children:(0,s.jsx)(n.strong,{children:"Async Executions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Wrap asynchronous code in a ",(0,s.jsx)(n.code,{children:"try/catch"})," block to prevent crashes."]}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"async/await"})," for better readability and error handling."]}),"\n",(0,s.jsx)(n.li,{children:"Ensure proper cleanup (e.g., aborting API requests) in case of errors."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Toast notification utility\nconst showToast = (message) => {\n    // Example: Use a library like react-toastify or custom implementation\n    console.log(`Toast: ${message}`); // Replace with actual toast implementation\n};\n\n// Async function to read a file\nconst readFileAsync = async (filePath) => {\n    const fs = require('fs').promises; // Using Node.js fs.promises for async file operations\n\n    try {\n    const data = await fs.readFile(filePath, 'utf-8'); // Read file asynchronously\n    console.log('File content:', data);\n    showToast('File read successfully!');\n    return data;\n    } catch (error) {\n    console.error('File Read Error:', error); // Log error for debugging\n    showToast('Failed to read the file. Please check the file path and try again.'); // User feedback\n    throw error; // Re-throw the error if needed\n    } finally {\n    console.log('File read operation completed.'); // Cleanup or logging\n    }\n};\n\n// Example usage\nconst processFile = async () => {\n    const filePath = './example.txt'; // Replace with your file path\n    try {\n    const fileContent = await readFileAsync(filePath);\n    console.log('Processing file content:', fileContent);\n    } catch (error) {\n    console.error('Error processing file:', error);\n    }\n};\n\n// Run the example\nprocessFile();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"api-call-errors",children:(0,s.jsx)(n.strong,{children:"API Call Errors"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Provide user feedback using ",(0,s.jsx)(n.strong,{children:"Toast notifications"})," or ",(0,s.jsx)(n.strong,{children:"alerts"})," for API errors."]}),"\n",(0,s.jsxs)(n.li,{children:["Use a ",(0,s.jsx)(n.strong,{children:"common error-handling function"})," to centralize error handling logic."]}),"\n",(0,s.jsxs)(n.li,{children:["Include an ",(0,s.jsx)(n.strong,{children:"error message formatter"})," to ensure consistent and user-friendly error messages."]}),"\n",(0,s.jsx)(n.li,{children:"Log errors for debugging purposes on DEVELOPMENT or STAGING only"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Common error-handling function\nconst handleApiError = (error) => {\n    const formattedMessage = formatErrorMessage(error);\n    showToast(formattedMessage); // Display toast notification\n    console.error('API Error:', error); // Log error for debugging\n};\n\n// Error message formatter\nconst formatErrorMessage = (error) => {\n    if (error.response) {\n    // Server responded with a status code outside 2xx\n    return `Error: ${error.response.data.message || 'Something went wrong'}`;\n    } else if (error.request) {\n    // Request was made but no response received\n    return 'Network error. Please check your connection.';\n    } else {\n    // Something else happened\n    return 'An unexpected error occurred.';\n    }\n};\n\n// Toast notification utility\nconst showToast = (message) => {\n    // Example: Use a library like react-toastify or custom implementation\n    console.log(`Toast: ${message}`); // Replace with actual toast implementation\n};\n\n// Example API call\nconst fetchData = async () => {\n    try {\n    const response = await axios.get('/api/data');\n    return response.data;\n    } catch (error) {\n    handleApiError(error); // Handle error using common function\n    }\n};\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var o=r(6540);const s={},t=o.createContext(s);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);