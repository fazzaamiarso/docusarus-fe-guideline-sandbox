"use strict";(self.webpackChunkwida_fe_docs_test=self.webpackChunkwida_fe_docs_test||[]).push([[864],{5303:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"best-practices","title":"Best Practices","description":"Use configured design tokens","source":"@site/docs/best-practices.md","sourceDirName":".","slug":"/best-practices","permalink":"/docusarus-fe-guideline-sandbox/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/fazzaamiarso/docusarus-fe-guideline-sandbox/docs/best-practices.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"sidebar_label":"Best Practices","title":"Best Practices"},"sidebar":"default","previous":{"title":"Performance Optimization","permalink":"/docusarus-fe-guideline-sandbox/performance-optimization"},"next":{"title":"Error Handling","permalink":"/docusarus-fe-guideline-sandbox/error-handling"}}');var t=s(4848),a=s(8453);const r={sidebar_position:10,sidebar_label:"Best Practices",title:"Best Practices"},o=void 0,l={},d=[{value:"Use configured design tokens",id:"use-configured-design-tokens",level:2},{value:"Make sure to Reset pagination when searching or filtering",id:"make-sure-to-reset-pagination-when-searching-or-filtering",level:2},{value:"Use Semantic HTML elements",id:"use-semantic-html-elements",level:2},{value:"(DOUBLE EDGE) Barrel Files",id:"double-edge-barrel-files",level:2},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"Colocate state to closely to where it being used",id:"colocate-state-to-closely-to-where-it-being-used",level:2},{value:"Implementing Acessibility is HARD",id:"implementing-acessibility-is-hard",level:2},{value:"[NEED MORE Exploration] Ideally Business and Domain logic needs to be separated from UI.",id:"need-more-exploration-ideally-business-and-domain-logic-needs-to-be-separated-from-ui",level:2},{value:"Extract or encapsulate functionality to custom hooks",id:"extract-or-encapsulate-functionality-to-custom-hooks",level:2},{value:"Typescript",id:"typescript",level:2},{value:"Security",id:"security",level:2},{value:"Components",id:"components",level:2},{value:"AVOID components with large props",id:"avoid-components-with-large-props",level:2},{value:"AVOID passing feature specific props to general or reusable components",id:"avoid-passing-feature-specific-props-to-general-or-reusable-components",level:2},{value:"Prefer to use shared utils and components first",id:"prefer-to-use-shared-utils-and-components-first",level:2},{value:"SHOULD have styling for different UI interactions",id:"should-have-styling-for-different-ui-interactions",level:2},{value:"Handle possible states for a UI",id:"handle-possible-states-for-a-ui",level:2},{value:"Loading",id:"loading",level:3},{value:"Spinners/Loading Indicators",id:"spinnersloading-indicators",level:4},{value:"Component-Level Loading States",id:"component-level-loading-states",level:4},{value:"Full-Page Loading Indicators",id:"full-page-loading-indicators",level:4},{value:"Content-Specific Approaches",id:"content-specific-approaches",level:4},{value:"Feedback Mechanisms",id:"feedback-mechanisms",level:4},{value:"Error State Handling",id:"error-state-handling",level:4},{value:"Smart Loading Patterns",id:"smart-loading-patterns",level:4},{value:"Success",id:"success",level:3},{value:"Toast Notifications",id:"toast-notifications",level:4},{value:"Alert Banners",id:"alert-banners",level:4},{value:"Checkmarks and Success Icons",id:"checkmarks-and-success-icons",level:4},{value:"Progress Indicators",id:"progress-indicators",level:4},{value:"Modals or Dialog Boxes",id:"modals-or-dialog-boxes",level:4},{value:"Button States (Success Feedback on Click)",id:"button-states-success-feedback-on-click",level:4},{value:"Status Badges",id:"status-badges",level:4},{value:"Animations &amp; Microinteractions",id:"animations--microinteractions",level:4},{value:"Sound or Haptic Feedback <em>(For Mobile/Web Apps)</em>",id:"sound-or-haptic-feedback-for-mobileweb-apps",level:4},{value:"Celebration Screens <em>(For Major Milestones)</em>",id:"celebration-screens-for-major-milestones",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"use-configured-design-tokens",children:"Use configured design tokens"}),"\n",(0,t.jsxs)(n.p,{children:["for ",(0,t.jsx)(n.strong,{children:"colors and typography"}),", make sure to use the variables or constants that\u2019s already setup in the project\u2019s config for consistency."]}),"\n",(0,t.jsxs)(n.p,{children:["It should already configured based on Design System. For example, in tailwindcss we have ",(0,t.jsx)(n.strong,{children:"tailwind.config.js"})]}),"\n",(0,t.jsx)(n.h2,{id:"make-sure-to-reset-pagination-when-searching-or-filtering",children:"Make sure to Reset pagination when searching or filtering"}),"\n",(0,t.jsx)(n.p,{children:"When you filter data in a table or list, it's important to reset the current page number back to page 1. Here's why:"}),"\n",(0,t.jsx)(n.p,{children:"Imagine you're on page 10 of your data. When you apply a filter, two things can happen:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"If there's enough filtered data to fill 10 pages - everything works fine"}),"\n",(0,t.jsx)(n.li,{children:"If there's less data and it only fills 5 pages - you'll see an empty page because page 10 doesn't exist anymore"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To prevent showing empty pages, always reset to page 1 when applying filters. This ensures users will always see the first page of their filtered results."}),"\n",(0,t.jsx)(n.h2,{id:"use-semantic-html-elements",children:"Use Semantic HTML elements"}),"\n",(0,t.jsxs)(n.p,{children:["Avoid ",(0,t.jsx)(n.code,{children:"<div>"})," and ",(0,t.jsx)(n.code,{children:"<span>"})," as much as possible. If it\u2019s a button, then use ",(0,t.jsx)(n.code,{children:"<button/>"}),", if it\u2019s a Link then use ",(0,t.jsx)(n.code,{children:"<a>"})," or ",(0,t.jsx)(n.code,{children:"<Link>"})," . This is the basic for Web Accessibility,"]}),"\n",(0,t.jsxs)(n.p,{children:["Reference: ",(0,t.jsx)(n.a,{href:"https://web.dev/learn/html/semantic-html",children:"https://web.dev/learn/html/semantic-html"})]}),"\n",(0,t.jsx)(n.h2,{id:"double-edge-barrel-files",children:"(DOUBLE EDGE) Barrel Files"}),"\n",(0,t.jsx)(n.p,{children:"Barrel files (index.ts/js files that re-export contents) are a common pattern for organizing and simplifying imports, but they come with important tradeoffs to consider."}),"\n",(0,t.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Cleaner imports (import from one file instead of many)"}),"\n",(0,t.jsx)(n.li,{children:"Easier refactoring when moving files"}),"\n",(0,t.jsx)(n.li,{children:"More organized public API surface"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can impact build optimization and tree-shaking"}),"\n",(0,t.jsx)(n.li,{children:"May increase bundle size"}),"\n",(0,t.jsx)(n.li,{children:"Potential circular dependency issues"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here are references to different opinions"}),"\n",(0,t.jsxs)(n.p,{children:["Pro barrel files: ",(0,t.jsx)(n.a,{href:"https://adrianfaciu.dev/posts/barrel-files/",children:"Why and How to use Barrel Files"})]}),"\n",(0,t.jsxs)(n.p,{children:["Against barrel files: ",(0,t.jsx)(n.a,{href:"https://tkdodo.eu/blog/please-stop-using-barrel-files",children:"Please Stop Using Barrel Files"})]}),"\n",(0,t.jsx)(n.h2,{id:"colocate-state-to-closely-to-where-it-being-used",children:"Colocate state to closely to where it being used"}),"\n",(0,t.jsx)(n.p,{children:"We can keep in mind to put things that are related as close as possible to where it being it used. This will make it easier to find things."}),"\n",(0,t.jsxs)(n.p,{children:["Great Reference: ",(0,t.jsx)(n.a,{href:"https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster",children:"https://kentcdodds.com/blog/state-colocation-will-make-your-react-app-faster"})]}),"\n",(0,t.jsx)(n.h2,{id:"implementing-acessibility-is-hard",children:"Implementing Acessibility is HARD"}),"\n",(0,t.jsxs)(n.p,{children:["We use component libraries to build components that have A11y builtin and tested. Reach for ",(0,t.jsx)(n.code,{children:"shadcn"})," , ",(0,t.jsx)(n.code,{children:"radix-ui"})," for building blocks of your component."]}),"\n",(0,t.jsx)(n.h2,{id:"need-more-exploration-ideally-business-and-domain-logic-needs-to-be-separated-from-ui",children:"[NEED MORE Exploration] Ideally Business and Domain logic needs to be separated from UI."}),"\n",(0,t.jsx)(n.p,{children:"Can extract it to its own function or custom hook so it can be tested easily."}),"\n",(0,t.jsx)(n.h2,{id:"extract-or-encapsulate-functionality-to-custom-hooks",children:"Extract or encapsulate functionality to custom hooks"}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"Typescript"}),"\n",(0,t.jsxs)(n.p,{children:["Refer to this for Do\u2019s and Don\u2019ts ",(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html",children:"https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html"})]}),"\n",(0,t.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.p,{children:["Refer to this for general security guideline ",(0,t.jsx)(n.a,{href:"https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines",children:"https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines"})]}),"\n",(0,t.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(n.p,{children:"For elements, create base components or Atoms"}),"\n",(0,t.jsx)(n.p,{children:"This should be purely a presenter and view only without external dependencies"}),"\n",(0,t.jsxs)(n.p,{children:["For Example for Input we can have the ",(0,t.jsx)(n.code,{children:"<BaseInput>"})," that is for UI that will handle the UI for hover, focused, active, etc."]}),"\n",(0,t.jsxs)(n.p,{children:["To add logic like integrate it with form, we cam create a wrapper ",(0,t.jsx)(n.code,{children:"<TextField>"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// example from https://github.com/calcom/cal.com/blob/main/packages/ui/components/form/inputs/TextField.tsx\nexport const Input = forwardRef<HTMLInputElement, InputProps>(function Input(\n{ isFullWidth = true, ...props },\nref\n) {\nreturn (\n<input\n    {...props}\n    ref={ref}\n    className={classNames(\n    "hover:border-emphasis dark:focus:border-emphasis border-default bg-default placeholder:text-muted text-emphasis disabled:hover:border-default disabled:bg-subtle focus:ring-brand-default focus:border-subtle mb-2 block h-9 rounded-md border px-3 py-2 text-sm leading-4 transition focus:outline-none focus:ring-2 disabled:cursor-not-allowed",\n    isFullWidth && "w-full",\n    props.className\n    )}\n/>\n);\n});\n\nconst Addon = ({ isFilled, children, className, error, onClickAddon }: AddonProps) => (\n);\n\nexport const InputField = forwardRef<HTMLInputElement, InputFieldProps>(function InputField(props, ref) {\nconst id = useId();\nconst { t: _t, isLocaleReady, i18n } = useLocale();\nconst t = props.t || _t;\nconst name = props.name || "";\nconst {\nlabel = t(name),\nlabelProps,\nlabelClassName,\ndisabled,\nLockedIcon,\nplaceholder = isLocaleReady && i18n.exists(`${name}_placeholder`) ? t(`${name}_placeholder`) : "",\nclassName,\naddOnLeading,\naddOnSuffix,\naddOnFilled = true,\naddOnClassname,\ninputIsFullWidth,\nhint,\ntype,\nhintErrors,\nlabelSrOnly,\nnoLabel,\ncontainerClassName,\nreadOnly,\nshowAsteriskIndicator,\nonClickAddon,\nt: __t,\ndataTestid,\n...passThrough\n} = props;\n\nconst [inputValue, setInputValue] = useState<string>("");\n\nreturn (\n<div className={classNames(containerClassName)}>\n    {!!name && !noLabel && (\n    <Skeleton\n        as={Label}\n        htmlFor={id}\n        loadingClassName="w-16"\n        {...labelProps}\n        className={classNames(labelClassName, labelSrOnly && "sr-only", props.error && "text-error")}>\n        {label}\n        {showAsteriskIndicator && !readOnly && passThrough.required ? (\n        <span className="text-default ml-1 font-medium">*</span>\n        ) : null}\n        {LockedIcon}\n    </Skeleton>\n    )}\n    {addOnLeading || addOnSuffix ? (\n    <div\n        dir="ltr"\n        className="focus-within:ring-brand-default group relative mb-1 flex items-center rounded-md transition focus-within:outline-none focus-within:ring-2">\n        {addOnLeading && (\n        <Addon\n            isFilled={addOnFilled}\n            className={classNames("ltr:rounded-l-md rtl:rounded-r-md", addOnClassname)}>\n            {addOnLeading}\n        </Addon>\n        )}\n        <Input\n        data-testid={`${dataTestid}-input` ?? "input-field"}\n        id={id}\n        type={type}\n        placeholder={placeholder}\n        isFullWidth={inputIsFullWidth}\n        className={classNames(\n            className,\n            "disabled:bg-subtle disabled:hover:border-subtle disabled:cursor-not-allowed",\n            addOnLeading && "rounded-l-none border-l-0",\n            addOnSuffix && "rounded-r-none border-r-0",\n            type === "search" && "pr-8",\n            "!my-0 !ring-0"\n        )}\n        {...passThrough}\n        {...(type == "search" && {\n            onChange: (e) => {\n            setInputValue(e.target.value);\n            props.onChange && props.onChange(e);\n            },\n            value: inputValue,\n        })}\n        disabled={readOnly || disabled}\n        ref={ref}\n        />\n        {addOnSuffix && (\n        <Addon\n            onClickAddon={onClickAddon}\n            isFilled={addOnFilled}\n            className={classNames("ltr:rounded-r-md rtl:rounded-l-md", addOnClassname)}>\n            {addOnSuffix}\n        </Addon>\n        )}\n        {type === "search" && inputValue?.toString().length > 0 && (\n        <Icon\n            name="x"\n            className="text-subtle absolute top-2.5 h-4 w-4 cursor-pointer ltr:right-2 rtl:left-2"\n            onClick={(e) => {\n            setInputValue("");\n            props.onChange && props.onChange(e as unknown as React.ChangeEvent<HTMLInputElement>);\n            }}\n        />\n        )}\n    </div>\n    ) : (\n    <Input\n        id={id}\n        type={type}\n        placeholder={placeholder}\n        className={classNames(\n        className,\n        "disabled:bg-subtle disabled:hover:border-subtle disabled:cursor-not-allowed"\n        )}\n        {...passThrough}\n        readOnly={readOnly}\n        ref={ref}\n        isFullWidth={inputIsFullWidth}\n        disabled={readOnly || disabled}\n    />\n    )}\n    <HintsOrErrors hintErrors={hintErrors} fieldName={name} t={t} />\n    {hint && <div className="text-default mt-2 flex items-center text-sm">{hint}</div>}\n</div>\n);\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"avoid-components-with-large-props",children:"AVOID components with large props"}),"\n",(0,t.jsx)(n.p,{children:"This may be a sign to split it into another component or use composition pattern"}),"\n",(0,t.jsx)(n.h2,{id:"avoid-passing-feature-specific-props-to-general-or-reusable-components",children:"AVOID passing feature specific props to general or reusable components"}),"\n",(0,t.jsx)(n.p,{children:"We do this to avoid coupling of the component to the feature, make it easier to test and easier to maintain."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Good Pattern"})," would be to pass in general props that it\u2019s or composition."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Bad Pattern"})," would be passing one of props like ",(0,t.jsx)(n.code,{children:"isEditPromocode"})," to a  generic ",(0,t.jsx)(n.code,{children:"Navbar"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Bad Pattern Example - Tightly coupled with feature-specific props\ninterface BadNavbarProps {\ntitle: string;\nisEditPromocode?: boolean;  // \ud83d\udeab Feature-specific prop\nisManageInventory?: boolean; // \ud83d\udeab Feature-specific prop\nshowOrderHistory?: boolean;  // \ud83d\udeab Feature-specific prop\n}\n\nconst BadNavbar: React.FC<BadNavbarProps> = ({ \ntitle, \nisEditPromocode, \nisManageInventory, \nshowOrderHistory \n}) => {\nreturn (\n<nav className="flex items-center justify-between p-4 bg-gray-800">\n    <h1 className="text-white text-xl">{title}</h1>\n    <div className="flex gap-4">\n    {isEditPromocode && (\n        <button className="text-white">Edit Promocode</button>\n    )}\n    {isManageInventory && (\n        <button className="text-white">Manage Inventory</button>\n    )}\n    {showOrderHistory && (\n        <button className="text-white">Order History</button>\n    )}\n    </div>\n</nav>\n);\n};\n\n// Good Pattern Example - Using composition and generic props\ninterface NavbarProps {\ntitle: string;\nactions?: React.ReactNode; // \u2705 Generic prop that accepts any content\n}\n\nconst Navbar: React.FC<NavbarProps> = ({ title, actions }) => {\nreturn (\n<nav className="flex items-center justify-between p-4 bg-gray-800">\n    <h1 className="text-white text-xl">{title}</h1>\n    {actions && <div className="flex gap-4">{actions}</div>}\n</nav>\n);\n};\n\n// Feature-specific components using composition\nconst PromocodePage: React.FC = () => {\nconst navbarActions = (\n<>\n    <button className="text-white">Edit Promocode</button>\n    <button className="text-white">View History</button>\n</>\n);\n\nreturn (\n<div>\n    <Navbar \n    title="Promocode Management"\n    actions={navbarActions} // \u2705 Passing content via composition\n    />\n    {/* Rest of the page content */}\n</div>\n);\n};\n\nconst InventoryPage: React.FC = () => {\nconst navbarActions = (\n<>\n    <button className="text-white">Add Item</button>\n    <button className="text-white">Export Inventory</button>\n</>\n);\n\nreturn (\n<div>\n    <Navbar \n    title="Inventory Management"\n    actions={navbarActions} // \u2705 Different actions for different features\n    />\n    {/* Rest of the page content */}\n</div>\n);\n};\n\nexport { Navbar, PromocodePage, InventoryPage };\n'})}),"\n",(0,t.jsx)(n.h2,{id:"prefer-to-use-shared-utils-and-components-first",children:"Prefer to use shared utils and components first"}),"\n",(0,t.jsx)(n.p,{children:"Before creating or building your UI, check first for existing implementation, most likely it\u2019s already implemented. This will make our code DRY."}),"\n",(0,t.jsx)(n.h2,{id:"should-have-styling-for-different-ui-interactions",children:"SHOULD have styling for different UI interactions"}),"\n",(0,t.jsxs)(n.p,{children:["Implement Focus, Disabled, Hover, Error styles on Interactive elements (e.g. ",(0,t.jsx)(n.code,{children:"<input/>"}),", ",(0,t.jsx)(n.code,{children:"<button/>"}),", ",(0,t.jsx)(n.code,{children:"<link/>"}),"). Design system usually provide the UI already."]}),"\n",(0,t.jsxs)(n.p,{children:["Let\u2019s say for ",(0,t.jsx)(n.code,{children:"<Button/>"})," components variants we should have all the state"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// Variant styles including hover, focus, and disabled states\nconst variantStyles = {\n    primary: clsx(\n    'bg-blue-600 text-white',\n    'hover:bg-blue-700',\n    'focus-visible:ring-blue-500',\n    'disabled:bg-blue-300',\n    'active:bg-blue-800'\n    ),\n    secondary: clsx(\n    'bg-gray-100 text-gray-700 border border-gray-300',\n    'hover:bg-gray-200 hover:text-gray-900',\n    'focus-visible:ring-gray-500',\n    'disabled:bg-gray-50 disabled:text-gray-400 disabled:border-gray-200',\n    'active:bg-gray-300'\n    ),\n    danger: clsx(\n    'bg-red-600 text-white',\n    'hover:bg-red-700',\n    'focus-visible:ring-red-500',\n    'disabled:bg-red-300',\n    'active:bg-red-800'\n    ),\n    ghost: clsx(\n    'bg-transparent text-gray-700',\n    'hover:bg-gray-100',\n    'focus-visible:ring-gray-500',\n    'disabled:text-gray-300 disabled:bg-transparent disabled:hover:bg-transparent',\n    'active:bg-gray-200'\n    )\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"handle-possible-states-for-a-ui",children:"Handle possible states for a UI"}),"\n",(0,t.jsx)(n.h3,{id:"loading",children:"Loading"}),"\n",(0,t.jsx)(n.h4,{id:"spinnersloading-indicators",children:"Spinners/Loading Indicators"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Circular spinners (most common)"}),"\n",(0,t.jsx)(n.li,{children:"Linear progress bars at the top of pages/components"}),"\n",(0,t.jsx)(n.li,{children:"Skeleton loading animations that mimic the content layout"}),"\n",(0,t.jsx)(n.li,{children:"Pulsing/shimmer effects over placeholder content"}),"\n",(0,t.jsx)(n.li,{children:"Custom animated icons or branded loaders"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"component-level-loading-states",children:"Component-Level Loading States"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Disabled buttons with spinner inside"}),"\n",(0,t.jsx)(n.li,{children:"Opacity changes on the loading content area"}),"\n",(0,t.jsx)(n.li,{children:"Blurred content with overlay"}),"\n",(0,t.jsx)(n.li,{children:'Loading text replacement ("Save" \u2192 "Saving...")'}),"\n",(0,t.jsx)(n.li,{children:"Progress indicators within forms or upload components"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"full-page-loading-indicators",children:"Full-Page Loading Indicators"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Splash screens for initial app load"}),"\n",(0,t.jsx)(n.li,{children:"Overlay with centered spinner"}),"\n",(0,t.jsx)(n.li,{children:"Dimmed background with modal-style loader"}),"\n",(0,t.jsx)(n.li,{children:"Progress bars at the top of the browser (like YouTube)"}),"\n",(0,t.jsx)(n.li,{children:"Transitional screens between major navigation changes"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"content-specific-approaches",children:"Content-Specific Approaches"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Table/List row shimmer effects"}),"\n",(0,t.jsx)(n.li,{children:"Card placeholder layouts"}),"\n",(0,t.jsx)(n.li,{children:"Image thumbnails with loading state"}),"\n",(0,t.jsx)(n.li,{children:"Inline loading indicators (like chat messages sending)"}),"\n",(0,t.jsx)(n.li,{children:"Progressive loading of images/media"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"feedback-mechanisms",children:"Feedback Mechanisms"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Loading messages or tooltips"}),"\n",(0,t.jsx)(n.li,{children:"Estimated time remaining"}),"\n",(0,t.jsx)(n.li,{children:"Progress percentage"}),"\n",(0,t.jsx)(n.li,{children:"Step indicators for multi-stage processes"}),"\n",(0,t.jsx)(n.li,{children:"Status messages explaining the current operation"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"error-state-handling",children:"Error State Handling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Retry buttons for failed operations"}),"\n",(0,t.jsx)(n.li,{children:"Error messages with loading state reset options"}),"\n",(0,t.jsx)(n.li,{children:"Fallback content display"}),"\n",(0,t.jsx)(n.li,{children:"Partial content loading with error boundaries"}),"\n",(0,t.jsx)(n.li,{children:"Offline indicators with recovery options"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"smart-loading-patterns",children:"Smart Loading Patterns"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Optimistic UI updates (showing expected state before confirmation)"}),"\n",(0,t.jsx)(n.li,{children:"Stale-while-revalidate (showing old data while fetching new)"}),"\n",(0,t.jsx)(n.li,{children:"Progressive enhancement (loading critical content first)"}),"\n",(0,t.jsx)(n.li,{children:"Infinite scroll with load-more indicators"}),"\n",(0,t.jsx)(n.li,{children:"Lazy loading with placeholder content"}),"\n",(0,t.jsx)(n.li,{children:"Most of the time we also want to disable the UI to prevent spam, duplicate request, and uninteded actions"}),"\n",(0,t.jsx)(n.li,{children:"Success indicator"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"success",children:"Success"}),"\n",(0,t.jsx)(n.h4,{id:"toast-notifications",children:"Toast Notifications"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A small, temporary message that appears on the screen (usually at the bottom or top)."}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.em,{children:'"Your changes have been saved successfully!"'})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"alert-banners",children:"Alert Banners"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A noticeable banner at the top or within a section of the UI."}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.em,{children:'"Profile updated successfully."'})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"checkmarks-and-success-icons",children:"Checkmarks and Success Icons"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Visual indicators like a ",(0,t.jsx)(n.strong,{children:"\u2714\ufe0f checkmark"})," or ",(0,t.jsx)(n.strong,{children:"\u2705 green tick"})," next to completed actions."]}),"\n",(0,t.jsx)(n.li,{children:"Example: Showing a green checkmark next to a filled form field after validation."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"progress-indicators",children:"Progress Indicators"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Showing progress completion (like a progress bar reaching 100% and turning green)."}),"\n",(0,t.jsx)(n.li,{children:"Example: File upload completion with a success state."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"modals-or-dialog-boxes",children:"Modals or Dialog Boxes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Used for significant success messages (e.g., after completing a major task)."}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.em,{children:'"Congratulations! Your order has been placed successfully."'})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"button-states-success-feedback-on-click",children:"Button States (Success Feedback on Click)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Changing a button\'s label to indicate success (e.g., "Saved!" instead of "Save").'}),"\n",(0,t.jsx)(n.li,{children:"Example: A disabled green button with a checkmark after submission."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"status-badges",children:"Status Badges"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Small tags showing status updates (e.g., ",(0,t.jsx)(n.strong,{children:'"Completed"'})," in green)."]}),"\n",(0,t.jsxs)(n.li,{children:["Example: A dashboard with ",(0,t.jsx)(n.strong,{children:'"Success"'})," status indicators."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"animations--microinteractions",children:"Animations & Microinteractions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Confetti ffects \ud83c\udf89, subtle green glow, or success transitions to reinforce action completion."}),"\n",(0,t.jsxs)(n.li,{children:["Example: A ",(0,t.jsx)(n.strong,{children:"subtle bounce effect"})," on a success icon."]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"sound-or-haptic-feedback-for-mobileweb-apps",children:["Sound or Haptic Feedback ",(0,t.jsx)(n.em,{children:"(For Mobile/Web Apps)"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A success chime or vibration on mobile to indicate success."}),"\n",(0,t.jsx)(n.li,{children:'Example: A "ding" sound after a successful payment.'}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"celebration-screens-for-major-milestones",children:["Celebration Screens ",(0,t.jsx)(n.em,{children:"(For Major Milestones)"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Full-screen success messages with illustrations (e.g., after account setup)."}),"\n",(0,t.jsxs)(n.li,{children:["Example: ",(0,t.jsx)(n.em,{children:'"You\'re all set! Welcome aboard!"'})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);