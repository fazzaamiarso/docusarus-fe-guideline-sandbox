"use strict";(self.webpackChunkwida_fe_docs_test=self.webpackChunkwida_fe_docs_test||[]).push([[879],{1777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"react-native/development","title":"Development","description":"Some things to note when developing","source":"@site/docs/react-native/development.md","sourceDirName":"react-native","slug":"/react-native/development","permalink":"/docusarus-fe-guideline-sandbox/react-native/development","draft":false,"unlisted":false,"editUrl":"https://github.com/fazzaamiarso/docusarus-fe-guideline-sandbox/docs/react-native/development.md","tags":[],"version":"current","frontMatter":{"sidebar_label":"Development","title":"Development"},"sidebar":"docs","previous":{"title":"Environment Setup","permalink":"/docusarus-fe-guideline-sandbox/react-native/environment-setup"},"next":{"title":"Additional References","permalink":"/docusarus-fe-guideline-sandbox/additional-references"}}');var r=t(4848),o=t(8453);const s={sidebar_label:"Development",title:"Development"},l=void 0,a={},d=[{value:"General",id:"general",level:2},{value:"Bare/React Native CLI",id:"barereact-native-cli",level:2},{value:"Android",id:"android",level:3},{value:"IOS",id:"ios",level:3},{value:"Expo",id:"expo",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Some things to note when developing"}),"\n",(0,r.jsx)(n.h2,{id:"general",children:"General"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When using ",(0,r.jsx)(n.code,{children:"Touchables"})," or ",(0,r.jsx)(n.code,{children:"Pressables"}),", always use import from ",(0,r.jsx)(n.code,{children:"react-native"})," instead of ",(0,r.jsx)(n.code,{children:"react-native-gesture-handler"})," as it have some issue that's hard to debug. Refer to ",(0,r.jsx)(n.a,{href:"https://stackoverflow.com/questions/64742265/difference-between-touchables-from-react-native-and-react-native-gesture-handler",children:"Stack Overflow"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"barereact-native-cli",children:"Bare/React Native CLI"}),"\n",(0,r.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For Bundling Android, mainly we use the script configured listed in ",(0,r.jsx)(n.code,{children:"package.json"})]}),"\n",(0,r.jsx)(n.li,{children:"When bundling Gradle, sometimes will have out of memory error. To solve it you can uninstall the app's on the emulator and rerun the build."}),"\n",(0,r.jsxs)(n.li,{children:["When bundling sometimes occured insufficient memory error which caused by build cache piling up. To solve it, simply ",(0,r.jsx)(n.code,{children:"cd"})," into the android directory and run ",(0,r.jsx)(n.code,{children:"./gradlew --stop"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ios",children:"IOS"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For bundling IOS, always use XCode. The flow for bundling and publishing to AppStore is:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In Xcode, select ",(0,r.jsx)(n.code,{children:"build"})," tab on Xcode bar."]}),"\n",(0,r.jsx)(n.li,{children:"select clean build and wait until it's done"}),"\n",(0,r.jsxs)(n.li,{children:["after clean sucess can start to archive the bundle by ",(0,r.jsx)(n.code,{children:"build > Archive"}),". Wait until the bundling process done and organizer window will open."]}),"\n",(0,r.jsx)(n.li,{children:"Select the build that we want to upload, then 'Distribute App'. If the bundle is for testing only then, select Test Flight only. For publishing, select AppStore Connect."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"expo",children:"Expo"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Not Completed nor comprehensive. Will be periodically updated when development with Expo started"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For libraries, always search from Expo first-party libraries first to ensure compatibility with the framework. You can see all the list of Expo SDK libraries on ",(0,r.jsx)(n.a,{href:"https://docs.expo.dev/versions/latest/",children:"https://docs.expo.dev/versions/latest/"})]}),"\n",(0,r.jsxs)(n.li,{children:["We use Expo Router which use a file-based routing paradigm and quite different with Bare Workflow. If you are coming from Next.js than it should feel familiar. Make sure to read understand the concepts on ",(0,r.jsx)(n.a,{href:"https://docs.expo.dev/router/introduction/",children:"https://docs.expo.dev/router/introduction/"})]}),"\n",(0,r.jsx)(n.li,{children:"We will most certainly use managed Expo with development build and Continuous Native Generation. So Expo Go, unlikey to work with our apps."}),"\n",(0,r.jsxs)(n.li,{children:["To see all compatible libraries with expo or new architecture, search in ",(0,r.jsx)(n.a,{href:"https://reactnative.directory/",children:"https://reactnative.directory/"})]}),"\n",(0,r.jsx)(n.li,{children:"Note that currently we use react native New Architecture (RN 0.76+) which introduces new way bridging with Native Code, so make sure the library that we install is compatible with new architecture."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);